[{"/home/theodore/Desktop/React Project/memoru-project/client/src/index.js":"1","/home/theodore/Desktop/React Project/memoru-project/client/src/App.js":"2","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Form/Form.js":"3","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Posts.js":"4","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Post/Post.js":"5","/home/theodore/Desktop/React Project/memoru-project/client/src/styles.js":"6","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Form/styles.js":"7","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/styles.js":"8","/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Post/styles.js":"9","/home/theodore/Desktop/React Project/memoru-project/client/src/reducers/index.js":"10","/home/theodore/Desktop/React Project/memoru-project/client/src/reducers/posts.js":"11","/home/theodore/Desktop/React Project/memoru-project/client/src/actions/posts.js":"12","/home/theodore/Desktop/React Project/memoru-project/client/src/api/index.js":"13"},{"size":451,"mtime":1607881519419,"results":"14","hashOfConfig":"15"},{"size":1283,"mtime":1607881290864,"results":"16","hashOfConfig":"15"},{"size":2634,"mtime":1607868879568,"results":"17","hashOfConfig":"15"},{"size":661,"mtime":1607879793447,"results":"18","hashOfConfig":"15"},{"size":1763,"mtime":1607881223498,"results":"19","hashOfConfig":"15"},{"size":349,"mtime":1607881014113,"results":"20","hashOfConfig":"15"},{"size":492,"mtime":1607864690953,"results":"21","hashOfConfig":"15"},{"size":264,"mtime":1607881037270,"results":"22","hashOfConfig":"15"},{"size":961,"mtime":1607881124658,"results":"23","hashOfConfig":"15"},{"size":114,"mtime":1607866316261,"results":"24","hashOfConfig":"15"},{"size":213,"mtime":1607868912269,"results":"25","hashOfConfig":"15"},{"size":467,"mtime":1607879335046,"results":"26","hashOfConfig":"15"},{"size":181,"mtime":1607868673894,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16tpwj1",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"35"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/home/theodore/Desktop/React Project/memoru-project/client/src/index.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/App.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Form/Form.js",["57"],"import React, { useState } from 'react'\nimport {\n  TextField,\n  Button,\n  Typograph,\n  Paper,\n  Typography,\n} from '@material-ui/core'\nimport FileBase from 'react-file-base64'\nimport { useDispatch } from 'react-redux'\n\nimport useStyles from './styles'\nimport { createPost } from '../../actions/posts'\nconst Form = () => {\n  const [postData, setPostData] = useState({\n    creator: '',\n    title: '',\n    message: '',\n    selectedFile: '',\n  })\n  const classes = useStyles()\n  const dispatch = useDispatch()\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    dispatch(createPost(postData))\n  }\n  const clear = () => {}\n  return (\n    <Paper className={classes.paper}>\n      <form\n        autoComplete='off'\n        noValidate\n        className={`${classes.root} ${classes.form}`}\n        onSubmit={handleSubmit}\n      >\n        <Typography variant='h6'>Creating a Memory</Typography>\n        <TextField\n          name='creator'\n          variant='outlined'\n          label='Creator'\n          fullWidth\n          value={postData.creator}\n          onChange={(e) =>\n            setPostData({ ...postData, creator: e.target.value })\n          }\n        />\n        <TextField\n          name='title'\n          variant='outlined'\n          label='Title'\n          fullWidth\n          value={postData.title}\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\n        />\n        <TextField\n          name='message'\n          variant='outlined'\n          label='Message'\n          fullWidth\n          value={postData.message}\n          onChange={(e) =>\n            setPostData({ ...postData, message: e.target.value })\n          }\n        />\n        <TextField\n          name='tags'\n          variant='outlined'\n          label='Tags'\n          fullWidth\n          value={postData.tags}\n          onChange={(e) => setPostData({ ...postData, tags: e.target.value })}\n        />\n        <div className={classes.fileInput}>\n          <FileBase\n            type='file'\n            multiple={false}\n            onDone={({ base64 }) =>\n              setPostData({ ...postData, selectedFile: base64 })\n            }\n          />\n        </div>\n        <Button\n          className={classes.buttonSubmit}\n          variant='contained'\n          color='primary'\n          size='large'\n          type='submit'\n          fullWidth\n        >\n          Submit\n        </Button>\n        <Button\n          variant='contained'\n          color='secondary'\n          size='small'\n          onClick={clear}\n          fullWidth\n        >\n          Clear\n        </Button>\n      </form>\n    </Paper>\n  )\n}\n\nexport default Form\n",["58","59"],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Posts.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Post/Post.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/styles.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Form/styles.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/styles.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/components/Posts/Post/styles.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/reducers/index.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/reducers/posts.js",["60"],"export default (posts = [], action) => {\n  switch (action.type) {\n    case 'FETCH_ALL':\n      return action.payload\n    case 'CREATE':\n      return [...posts, action.payload]\n    default:\n      return posts\n  }\n}\n","/home/theodore/Desktop/React Project/memoru-project/client/src/actions/posts.js",[],"/home/theodore/Desktop/React Project/memoru-project/client/src/api/index.js",[],{"ruleId":"61","severity":1,"message":"62","line":5,"column":3,"nodeType":"63","messageId":"64","endLine":5,"endColumn":12},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":1,"column":1,"nodeType":"71","endLine":10,"endColumn":2},"no-unused-vars","'Typograph' is defined but never used.","Identifier","unusedVar","no-native-reassign",["72"],"no-negated-in-lhs",["73"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]